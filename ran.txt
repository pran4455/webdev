# app/models/user.rb
class User < ApplicationRecord
  has_many :recipes, dependent: :destroy
  has_many :comments, dependent: :destroy

  validates :name, presence: true
end

# app/models/recipe.rb
class Recipe < ApplicationRecord
  belongs_to :user
  has_many :comments, dependent: :destroy

  validates :title, :ingredients, :description, presence: true

  def self.search(term)
    joins(:user).where("ingredients LIKE ? OR users.name LIKE ?", "%#{term}%", "%#{term}%")
  end
end

# app/models/comment.rb
class Comment < ApplicationRecord
  belongs_to :user
  belongs_to :recipe

  validates :content, presence: true
end

# app/controllers/recipes_controller.rb
class RecipesController < ApplicationController
  before_action :set_recipe, only: %i[show edit update destroy]
  before_action :require_author, only: %i[edit update destroy]

  def index
    if params[:search].present?
      @recipes = Recipe.search(params[:search])
    else
      @recipes = Recipe.all
    end
  end

  def show
    @comments = @recipe.comments.includes(:user)
  end

  def new
    @recipe = current_user.recipes.build
  end

  def create
    @recipe = current_user.recipes.build(recipe_params)
    if @recipe.save
      redirect_to @recipe, notice: "Recipe created successfully."
    else
      render :new
    end
  end

  def edit; end

  def update
    if @recipe.update(recipe_params)
      redirect_to @recipe, notice: "Recipe updated."
    else
      render :edit
    end
  end

  def destroy
    @recipe.destroy
    redirect_to recipes_path, notice: "Recipe deleted."
  end

  private

  def set_recipe
    @recipe = Recipe.find(params[:id])
  end

  def recipe_params
    params.require(:recipe).permit(:title, :ingredients, :description)
  end

  def require_author
    redirect_to recipes_path, alert: "Not authorized." unless @recipe.user == current_user
  end
end

# app/controllers/comments_controller.rb
class CommentsController < ApplicationController
  def create
    @recipe = Recipe.find(params[:recipe_id])
    @comment = @recipe.comments.build(comment_params)
    @comment.user = current_user

    if @comment.save
      redirect_to recipe_path(@recipe), notice: "Comment added."
    else
      redirect_to recipe_path(@recipe), alert: "Comment cannot be blank."
    end
  end

  private

  def comment_params
    params.require(:comment).permit(:content)
  end
end

# config/routes.rb
Rails.application.routes.draw do
  resources :recipes do
    resources :comments, only: [:create]
  end
  resources :users
  root "recipes#index"
end

########################
calculator

class CalculatorController < ApplicationController
  protect_from_forgery with: :exception
  
  def index
  end
  
  def compute
    num1 = params[:num1].to_f
    num2 = params[:num2].to_f
    
    @result = case params[:operation]
    when "+"
      num1 + num2
    when "-"
      num1 - num2
    when "*"
      num1 * num2
    when "/"
      num2.zero? ? "Cannot divide by zero" : num1 / num2
    end
  
    Rails.logger.debug "Calculation result: #{@result}"
    
    respond_to do |format|
      format.html { render :index }
      format.turbo_stream { 
        render turbo_stream: turbo_stream.update("result", partial: "result") 
      }
    end
  end
end

#################################

